#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

int graph[50][50];
int visited[50][50];
int m, n;

int dx[4] = {0, -1, 0, 1};
int dy[4] = {1, 0, -1, 0};

void dfs(int x, int y) {
    visited[x][y] = true;

    for (int i = 0; i < 4; i++) {
        int nx, ny;
        nx = x + dx[i];
        ny = y + dy[i];
        if (nx < 0 || nx >= n || ny < 0 || ny >= m) {
            continue;
        }
        if (!visited[nx][ny] && graph[nx][ny]) dfs(nx, ny);
    }
}
int main() {
    int t;

    cin >> t;

    while (t--) {
        memset(graph, 0, sizeof(graph));
        memset(visited, false, sizeof(visited));

        int k;
        cin >> m >> n >> k;
        for (int i = 0; i < k; i++) {
            int x, y;
            cin >> y >> x;
            graph[x][y] = 1;
        }

        int cnt = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!visited[i][j] && graph[i][j]) {
                    cnt++;
                    dfs(i, j);
                }
            }
        }
        cout << cnt << endl;
    }
}
