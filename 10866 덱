#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct _node {
    int data;
    struct _node* next;
    struct _node* prev;
}Node;

typedef struct _deque{
    Node* front;
    Node* rear;
    int numofData;
}Deque;

void DequeInit(Deque* deq) {
    deq->front = NULL;
    deq->rear = NULL;
    deq->numofData = 0;
}

int IsEmpty(Deque* deq) {
    if (deq->front == NULL) 
        return 1;
    else 
        return 0;
}

int GetSize(Deque* deq) {
    return deq->numofData;
}

void PushFront(Deque* deq, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->next = deq->front; 
    newNode->data = data;

    if (IsEmpty(deq)) {
        deq->rear = newNode;
    }
    else {
        deq->front->prev = newNode;
    }
    deq->front = newNode;
    newNode->prev = NULL;

    (deq->numofData)++;
}

void PushBack(Deque* deq, int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->next = NULL;
    newNode->prev = deq->rear;
    newNode->data = data;

    if (IsEmpty(deq)) {
        deq->front = newNode;
        deq->rear = newNode;
    }
    else {
        deq->rear->next = newNode;
        newNode->prev = deq->rear;
        deq->rear = newNode;
    }
    (deq->numofData)++;
}

int PopFront(Deque* deq) {
    int data;
    Node* delNode = deq->front;

    if (IsEmpty(deq)) {
        return -1;
    }
    
    data = deq->front->data;
    deq->front = deq->front->next;

    free(delNode);
    if (deq->front == NULL) {
        deq->rear = NULL;
    }
    else {
        deq->front->prev = NULL;
    }
    deq->numofData -= 1;
    return data;

    
}

int PopBack(Deque* deq) {
    int data;
    Node* delNode = deq->rear;

    if (IsEmpty(deq)) {
        return -1;
    }
    
    data = deq->rear->data;
    deq->rear = deq->rear->prev;

    free(delNode);
    if (deq->rear == NULL) {
        deq->front = NULL;
    }
    else {
        deq->rear->next = NULL;
    }
    deq->numofData -= 1;
    return data;
    
}

int Front(Deque* deq) {
    if (IsEmpty(deq)) 
        return -1;
    else {
        return deq->front->data;
    }
}

int Back(Deque* deq) {
    if (IsEmpty(deq)) 
        return -1;
    else 
        return deq->rear->data;

}


int main(void) {
    int n;
    char str[20];
    int num;
    Deque deq;
    DequeInit(&deq);

    scanf("%d", &n);

    for(int i = 0; i < n; i++) {
        scanf("%s", str);
        if (!strcmp("push_front", str)) {
            scanf("%d", &num);
            PushFront(&deq, num);
        }
        else if (!strcmp("push_back", str)) {
            scanf("%d", &num);
            PushBack(&deq, num);
        }
        else if (!strcmp("pop_front", str)) {
            printf("%d\n",PopFront(&deq));
        }
        else if (!strcmp("pop_back", str)) {
            printf("%d\n",PopBack(&deq));
        }
        else if (!strcmp("size", str)) {
            printf("%d\n", GetSize(&deq));
        }
        else if (!strcmp("empty", str)) {
            printf("%d\n", IsEmpty(&deq));
        }
        else if (!strcmp("front", str)) {
            printf("%d\n",Front(&deq));
        }
        else if (!strcmp("back", str)) {
            printf("%d\n", Back(&deq));
        }

    }


}
