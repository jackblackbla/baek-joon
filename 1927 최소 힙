#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define HEAP_LEN 100001
typedef long PriorityComp(long d1, long d2);

typedef struct _heap {
    PriorityComp * comp;
    int numofData;
    long heapArr[HEAP_LEN];
}Heap;

void HeapInit(Heap* ph, PriorityComp pc) {
    ph->comp = pc;
    ph->numofData = 0;
}

int GetLChildIDX(int idx) {
    return idx * 2;
}

int GetRChildIDX(int idx) {
    return idx * 2 + 1;
}

int GetParentIDX(int idx) {
    return idx / 2;
}

int GetHighPriChildIDX(Heap* ph, int idx) {
    if (GetLChildIDX(idx) > ph->numofData) {
        return 0;
    }
    else if (GetLChildIDX(idx) == ph->numofData) {
        return GetLChildIDX(idx);
    }
    else {
        if (ph->comp(ph->heapArr[GetLChildIDX(idx)], ph->heapArr[GetRChildIDX(idx)]) > 0) {
            return GetLChildIDX(idx);
        }
        else
            return GetRChildIDX(idx);
    }
}

void HInsert(Heap* ph, long data) {
    int idx = ph->numofData + 1;

    while (idx != 1) {
        if (ph->comp(data, ph->heapArr[GetParentIDX(idx)]) > 0) {
            ph->heapArr[idx] = ph->heapArr[GetParentIDX(idx)];
            idx = GetParentIDX(idx);
        }
        else
            break;
    }

    ph->heapArr[idx] = data;
    ph->numofData += 1;
}

long HDelete(Heap* ph) {
    long retData = ph->heapArr[1];
    long lastElem = ph->heapArr[ph->numofData];
    int parentIdx = 1;
    int childIdx;

    while (childIdx = GetHighPriChildIDX(ph, parentIdx)) {
        if (ph->comp(lastElem, ph->heapArr[childIdx]) >= 0){
            break;
            }
        ph->heapArr[parentIdx] = ph->heapArr[childIdx];
        parentIdx = childIdx;

    }
    ph->heapArr[parentIdx] = lastElem;
    ph->numofData -= 1;

    return retData;
}

long PriorityCompData(long d1, long d2) {
    return d2- d1;
}
int main(void) {
    
    Heap heap;
    HeapInit(&heap, PriorityCompData);

    int n;
    long num;
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        scanf("%ld", &num);
        if (num == 0) {
            if (heap.numofData == 0) {
                printf("0\n");
            }
            else{
            printf("%ld\n", HDelete(&heap));
            }
        }
        else {
            HInsert(&heap, num);
        }
    }


}
